class Decrypt():

    def maths(self, cipherTxt):
        privateKey = [145906768007583323230186939349070635292401872375357164399581871019873438799005358938369571402670149802121818086292467422828157022922076746906543401224889672472407926969987100581290103199317858753663710862357656510507883714297115637342788911463535102712032765166518411726859837988672111837205085526346618740053,
                      89489425009274444368228545921773093919669586065884257445497854456487674839629818390934941973262879616797970608917283679875499331574161113854088813275488110588247193077582527278437906504015680623423550067240042466665654232383502922215493623289472138866445818789127946123407807725702626644091036502372545139713]
        # [N,d] where N = p*q and d is decryption key
        num = (cipherTxt**privateKey[1]) % privateKey[0]
        print(num)

    def numToStr(self, asciiNum):
        lst = [int(x) for x in str(asciiNum)]
        lst.append('*')
        answer = ''

        finalLst = []
        j = 0

        while lst[j] != '*':
            if lst[j] == 1:
                finalLst.insert(j, ''.join(map(str, lst[j:j+3])))
                j += 3
            else:
                finalLst.insert(j, ''.join(map(str, lst[j:j+2])))
                j += 2

        for i in range(len(finalLst)):
            answer += chr(int(finalLst[i]))
        print(answer)


newInstance = Decrypt()
# newInstance.maths(41240807914988370672899901061396222444615207389062630230082914892447982819695702052154470588263540319177212366131322536083402675274384499412576944301531330833875549248342454392257806628309168037430442395412079333677265358667717289122205315269532066584743834881381032365017278018020652478432325515274939564859)
newInstance.numToStr(7210532109121)
